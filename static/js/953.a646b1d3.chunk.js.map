{"version":3,"file":"static/js/953.a646b1d3.chunk.js","mappings":"+PA4DA,EAtDgB,WACd,IAAMA,GAAWC,EAAAA,EAAAA,MACjB,GAA0BC,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KAkBA,OAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,wGAERC,EAFQ,UAHJ,gCAGI,iBAEiBP,EAASQ,QAF1B,4BAJR,oCAIQ,SAGSC,MAAMF,GAAKG,MAAK,SAACC,GAAD,OAAUA,EAAKC,MAAf,IAHzB,gBAGNC,EAHM,EAGNA,KACRC,YAAW,WACTV,EAASS,EAAKE,MAAM,EAAG,GACxB,GAAE,KANW,gDAQdC,QAAQC,IAAR,MARc,yDAAH,qDAWfX,GACD,GAAE,CAACN,KAEF,eAAIkB,UAAU,iBAAd,SACGf,EAAMgB,OAAS,EACdhB,EAAMiB,KAAI,YAAwC,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACzBC,EAAMF,EAAY,UAnBf,mCAmBe,OACNA,GACd,oCACJ,OACE,gBAAIJ,UAAU,iBAAd,WACE,gBAAKO,IAAG,UAAKD,GAAOE,IAAI,iBAExB,wBAAKL,KACL,yBAAG,aAAWE,OAJoBF,EAOvC,KAED,SAAC,IAAD,KAIP,C,sBC/CD,SAASM,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CACIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAO1B,KAAKqB,EAAOC,EAEvC,CACe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACTC,EAAOC,UACT,OAAO,IAAIN,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GACzB,SAASb,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CACA,SAASJ,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CACAhB,OAAMiB,EACR,GACF,CACF,C","sources":["components/credits/credits.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"./style.css\";\r\nimport { Loader } from \"../loader/loader\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Credits = () => {\r\n  const location = useParams();\r\n  const [movie, setMovie] = useState({});\r\n  const Key = \"72a7646a40703400682c093b811827fe\";\r\n  const BaseUrl = \"https://api.themoviedb.org/3/\";\r\n  const imageUrl = \"https://image.tmdb.org/t/p/w342\";\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const url = `${BaseUrl}movie/${location.movieId}/credits?api_key=${Key}`;\r\n        const { cast } = await fetch(url).then((resp) => resp.json());\r\n        setTimeout(() => {\r\n          setMovie(cast.slice(0, 5));\r\n        }, 1000);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [location]);\r\n  return (\r\n    <ul className=\"character_list\">\r\n      {movie.length > 0 ? (\r\n        movie.map(({ name, profile_path, character }) => {\r\n          const img = profile_path\r\n            ? `${imageUrl}${profile_path}`\r\n            : \"https://picsum.photos/200/300.jpg\";\r\n          return (\r\n            <li className=\"character_item\" key={name}>\r\n              <img src={`${img}`} alt=\"Movie Image\" />\r\n\r\n              <h2>{name}</h2>\r\n              <p>Character:{character}</p>\r\n            </li>\r\n          );\r\n        })\r\n      ) : (\r\n        <Loader />\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\nCredits.propTypes = {\r\n  movie: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      profile_path: PropTypes.string.isRequired,\r\n      character: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  location: PropTypes.shape({\r\n    movieId: PropTypes.string.isRequired,\r\n  }),\r\n};\r\nexport default Credits;\r\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["location","useParams","useState","movie","setMovie","useEffect","fetchData","url","movieId","fetch","then","resp","json","cast","setTimeout","slice","console","log","className","length","map","name","profile_path","character","img","src","alt","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}