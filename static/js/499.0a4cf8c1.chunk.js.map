{"version":3,"file":"static/js/499.0a4cf8c1.chunk.js","mappings":"6OAGMA,EAAU,mCACVC,EAAU,gCAGHC,EAAS,mCAAG,WAAOC,EAAOC,EAAYC,GAA1B,uFAErBD,GAAW,GACND,EAHgB,wDAIfG,EAJe,UAINL,EAJM,8BAIuBE,EAJvB,wCAI4DH,GAJ5D,UAKKO,EAAAA,EAAAA,GAAMD,GAAKE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,IAAb,IAL7B,gBAME,KADfC,EALa,EAKbA,SACIC,QARKC,EAAAA,GAAAA,MAAY,sBAW7BC,YAAW,WACTT,EAASM,EACV,GAAE,KAXkB,kDAarBI,QAAQC,IAAR,MAbqB,yBAerBF,YAAW,WACTV,GAAW,EACZ,GAAE,KAjBkB,6EAAH,0DAoBTa,EAAS,mCAAG,WAAMC,GAAN,kFACjBZ,EADiB,UACRL,EADQ,sCAC6BD,EAD7B,qCAEGO,EAAAA,EAAAA,GAAMD,GAAKE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,IAAb,IAF3B,gBAEfC,EAFe,EAEfA,QACRO,EAASP,GAHc,2CAAH,qD,oICxBTQ,EAAO,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC5B,GAA0BC,EAAAA,EAAAA,UAASF,GAAnC,eAAOjB,EAAP,KAAcoB,EAAd,KAcA,OACE,kBAAMC,UAAU,cAAcH,SATX,SAAAI,GACnBA,EAAEC,iBACmB,KAAjBvB,EAAMwB,QAGVN,EAASlB,EACV,EAGC,WACE,kBACEyB,KAAK,OACLC,YAAY,eACZC,UAAQ,EACRV,MAAK,OAAEjB,QAAF,IAAEA,EAAAA,EAAS,GAChB4B,SAnBoB,SAAAN,GACxBF,EAASE,EAAEO,cAAcZ,MAC1B,KAmBG,mBAAQQ,KAAK,SAAb,SAAsB,aAG3B,E,iBCsCD,EA3De,WACb,OAA0BN,EAAAA,EAAAA,UAAS,IAAnC,eAAOW,EAAP,KAAc5B,EAAd,KACA,GAA8BiB,EAAAA,EAAAA,WAAS,GAAvC,eAAOY,EAAP,KAAgB9B,EAAhB,KACA,GAAwC+B,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXpC,EAAQiC,EAAaI,IAAI,UAG/BC,EAAAA,EAAAA,YAAU,YACRvC,EAAAA,EAAAA,GAAUC,EAAOC,EAAYC,EAC9B,GAAE,CAACF,IAUJ,OACE,iBAAKqB,UAAU,mBAAf,WACE,SAACL,EAAD,CAAMC,MAAOjB,EAAOkB,SAVD,SAAAqB,GACjBA,IAAgBvC,IAGpBkC,EAAgB,CAAElC,MAAOuC,IACzBrC,EAAS,IACV,KAKG,SAAC,KAAD,KACA,eAAImB,UAAU,aAAd,SACGU,GACC,SAAC,IAAD,IAEAD,EAAMU,KAAI,YAA0C,IAAvCC,EAAsC,EAAtCA,GAAIC,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,YAC/B,OACE,yBACE,SAAC,KAAD,CACEC,GAAE,UAAKH,GACPI,MAAO,CAAEC,KAAMX,GACfd,UAAU,cAHZ,UAKE,iBAAKA,UAAU,kBAAf,WACE,gBAAK0B,IAAG,UA9BT,mCA8BS,OAAgBJ,GAAeK,IAAI,MAC3C,uBAAIN,UARDD,EAaZ,QAKV,C","sources":["components/fetch/fetch.jsx","components/movies/form.jsx","components/movies/movies.jsx"],"sourcesContent":["import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst KeyUser = '72a7646a40703400682c093b811827fe';\r\nconst BaseUrl = 'https://api.themoviedb.org/3/';\r\nconst notify = () => toast.error('Please try again !');\r\n\r\nexport const fetchData = async (query, setLoading, setMovie) => {\r\n  try {\r\n    setLoading(true);\r\n    if (!query) return;\r\n    const url = `${BaseUrl}search/movie?query=${query}&include_adult=false&api_key=${KeyUser}`;\r\n    const { results } = await axios(url).then(response => response.data);\r\n    if (results.length === 0) {\r\n      notify();\r\n    }\r\n    setTimeout(() => {\r\n      setMovie(results);\r\n    }, 1000);\r\n  } catch (err) {\r\n    console.log(err);\r\n  } finally {\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 1000);\r\n  }\r\n};\r\nexport const makeFetch = async setFilms => {\r\n  const url = `${BaseUrl}trending/movie/day?api_key=${KeyUser}&language=en-US&&page=1`;\r\n  const { results } = await axios(url).then(response => response.data);\r\n  setFilms(results);\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\n\r\nexport const Form = ({ value, onSubmit }) => {\r\n  const [query, setQuery] = useState(value);\r\n\r\n  const handleInputChange = e => {\r\n    setQuery(e.currentTarget.value);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (query.trim() === '') {\r\n      return;\r\n    }\r\n    onSubmit(query);\r\n  };\r\n\r\n  return (\r\n    <form className=\"form_movies\" onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search movie\"\r\n        required\r\n        value={query ?? ''}\r\n        onChange={handleInputChange}\r\n      />\r\n      <button type=\"submit\">Search</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  value: PropTypes.string,\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport '../style.css';\r\nimport { Loader } from '../loader/loader';\r\nimport { useLocation, Link, useSearchParams } from 'react-router-dom';\r\nimport { Form } from './form';\r\nimport PropTypes from 'prop-types';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { fetchData } from 'components/fetch/fetch';\r\nconst Movies = () => {\r\n  const [movie, setMovie] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const location = useLocation();\r\n  const query = searchParams.get('query');\r\n\r\n  const imageUrl = 'https://image.tmdb.org/t/p/w342';\r\n  useEffect(() => {\r\n    fetchData(query, setLoading, setMovie);\r\n  }, [query]);\r\n\r\n  const searchOnSubmit = searchQuery => {\r\n    if (searchQuery === query) {\r\n      return;\r\n    }\r\n    setSearchParams({ query: searchQuery });\r\n    setMovie([]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-search\">\r\n      <Form value={query} onSubmit={searchOnSubmit} />\r\n      <ToastContainer />\r\n      <ul className=\"movie_list\">\r\n        {loading ? (\r\n          <Loader />\r\n        ) : (\r\n          movie.map(({ id, original_title, poster_path }) => {\r\n            return (\r\n              <li key={id}>\r\n                <Link\r\n                  to={`${id}`}\r\n                  state={{ from: location }}\r\n                  className=\"custom-link\"\r\n                >\r\n                  <div className=\"movie_list_item\">\r\n                    <img src={`${imageUrl}${poster_path}`} alt=\"\" />\r\n                    <p>{original_title}</p>\r\n                  </div>\r\n                </Link>\r\n              </li>\r\n            );\r\n          })\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nMovies.propTypes = {\r\n  movie: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      original_title: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default Movies;\r\n"],"names":["KeyUser","BaseUrl","fetchData","query","setLoading","setMovie","url","axios","then","response","data","results","length","toast","setTimeout","console","log","makeFetch","setFilms","Form","value","onSubmit","useState","setQuery","className","e","preventDefault","trim","type","placeholder","required","onChange","currentTarget","movie","loading","useSearchParams","searchParams","setSearchParams","location","useLocation","get","useEffect","searchQuery","map","id","original_title","poster_path","to","state","from","src","alt"],"sourceRoot":""}