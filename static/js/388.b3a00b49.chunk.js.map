{"version":3,"file":"static/js/388.b3a00b49.chunk.js","mappings":"+QAGaA,EAAO,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC5B,GAA0BC,EAAAA,EAAAA,UAASF,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KAcA,OACE,kBAAMC,UAAU,cAAcJ,SATX,SAAAK,GACnBA,EAAEC,iBACmB,KAAjBJ,EAAMK,QAGVP,EAASE,EACV,EAGC,WACE,kBACEM,KAAK,OACLC,YAAY,eACZC,UAAQ,EACRX,MAAK,OAAEG,QAAF,IAAEA,EAAAA,EAAS,GAChBS,SAnBoB,SAAAN,GACxBF,EAASE,EAAEO,cAAcb,MAC1B,KAmBG,mBAAQS,KAAK,SAAb,SAAsB,aAG3B,E,SCiDD,EAxEe,WACb,OAA0BP,EAAAA,EAAAA,UAAS,IAAnC,eAAOY,EAAP,KAAcC,EAAd,KACA,GAA8Bb,EAAAA,EAAAA,WAAS,GAAvC,eAAOc,EAAP,KAAgBC,EAAhB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXnB,EAAQgB,EAAaI,IAAI,UAI/BC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,oGAEdR,GAAW,GACNd,EAHS,wDAIRuB,EAJQ,UAFJ,gCAEI,8BAI8BvB,EAJ9B,wCAHJ,oCAGI,UAKYwB,EAAAA,EAAAA,GAAMD,GAAKE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,IAAb,IALpC,gBAMS,KADfC,EALM,EAKNA,SACIC,QACVC,MACE,kEAGJC,YAAW,WACTnB,EAASgB,EACV,GAAE,KAbW,kDAedI,QAAQC,IAAR,MAfc,yBAiBdnB,GAAW,GAjBG,6EAAH,qDAoBfQ,GACD,GAAE,CAACtB,IAUJ,OACE,iBAAKE,UAAU,mBAAf,WACE,SAACN,EAAD,CAAMC,MAAOG,EAAOF,SAVD,SAAAoC,GACjBA,IAAgBlC,IAGpBiB,EAAgB,CAAEjB,MAAOkC,IACzBtB,EAAS,IACV,KAKG,wBACGC,GACC,SAAC,IAAD,IAEAF,EAAMwB,KAAI,YAA6B,IAA1BC,EAAyB,EAAzBA,GAAIC,EAAqB,EAArBA,eACf,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAMtB,GAAlC,SACGmB,KAFID,EAMZ,QAKV,C","sources":["components/movies/form.jsx","components/movies/movies.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\n\r\nexport const Form = ({ value, onSubmit }) => {\r\n  const [query, setQuery] = useState(value);\r\n\r\n  const handleInputChange = e => {\r\n    setQuery(e.currentTarget.value);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (query.trim() === '') {\r\n      return;\r\n    }\r\n    onSubmit(query);\r\n  };\r\n\r\n  return (\r\n    <form className=\"form_movies\" onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search movie\"\r\n        required\r\n        value={query ?? ''}\r\n        onChange={handleInputChange}\r\n      />\r\n      <button type=\"submit\">Search</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  value: PropTypes.string,\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport '../style.css';\r\nimport { Loader } from '../loader/loader';\r\nimport { useLocation, Link, useSearchParams } from 'react-router-dom';\r\nimport { Form } from './form';\r\nimport axios from 'axios';\r\nimport PropTypes from 'prop-types';\r\nconst Movies = () => {\r\n  const [movie, setMovie] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const location = useLocation();\r\n  const query = searchParams.get('query');\r\n\r\n  const KeyUser = '72a7646a40703400682c093b811827fe';\r\n  const BaseUrl = 'https://api.themoviedb.org/3/';\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        if (!query) return;\r\n        const url = `${BaseUrl}search/movie?query=${query}&include_adult=false&api_key=${KeyUser}`;\r\n        const { results } = await axios(url).then(response => response.data);\r\n        if (results.length === 0) {\r\n          alert(\r\n            'Here is nothing to see, please put another query and try again'\r\n          );\r\n        }\r\n        setTimeout(() => {\r\n          setMovie(results);\r\n        }, 1000);\r\n      } catch (err) {\r\n        console.log(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [query]);\r\n\r\n  const searchOnSubmit = searchQuery => {\r\n    if (searchQuery === query) {\r\n      return;\r\n    }\r\n    setSearchParams({ query: searchQuery });\r\n    setMovie([]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-search\">\r\n      <Form value={query} onSubmit={searchOnSubmit} />\r\n      <ul>\r\n        {loading ? (\r\n          <Loader />\r\n        ) : (\r\n          movie.map(({ id, original_title }) => {\r\n            return (\r\n              <li key={id}>\r\n                <Link to={`${id}`} state={{ from: location }}>\r\n                  {original_title}\r\n                </Link>\r\n              </li>\r\n            );\r\n          })\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nMovies.propTypes = {\r\n  movie: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      original_title: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default Movies;\r\n"],"names":["Form","value","onSubmit","useState","query","setQuery","className","e","preventDefault","trim","type","placeholder","required","onChange","currentTarget","movie","setMovie","loading","setLoading","useSearchParams","searchParams","setSearchParams","location","useLocation","get","useEffect","fetchData","url","axios","then","response","data","results","length","alert","setTimeout","console","log","searchQuery","map","id","original_title","to","state","from"],"sourceRoot":""}